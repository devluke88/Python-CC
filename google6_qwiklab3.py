#!/usr/bin/env python3

import json
import locale
import sys
import reports
import emails
import os

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  locale.setlocale(locale.LC_ALL, 'en_US.UTF8')
  max_revenue = {"revenue": 0}
  max_sales = 0
  item_with_max = ""
  all_years = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales) 
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales
    if item["total_sales"] > max_sales:
      max_sales = item["total_sales"]
      item_with_max = item["car"]
    # TODO: also handle most popular car_year
    if item["car"]["car_year"] not in all_years:
      all_years[item["car"]["car_year"]] = item["total_sales"]
    else:
      all_years[item["car"]["car_year"]] += item["total_sales"]

  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
  ]
  
  summary.append("The {} had the most sales: {}".format(format_car(item_with_max), max_sales))
  summary.append("The most popular year was {} with {}".format(get_year_max(all_years)[0], get_year_max(all_years)[1]))
  return summary

def get_year_max(all_years):
  max_year = 0
  max_sales_t = 0
  for k, v in all_years.items():
    if v > max_sales_t:
      max_sales_t = v
      max_year = k
  return [max_year, max_sales_t]

def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report
  table_items = cars_dict_to_table(data)
  string_print = summary[0] + "<br/>" + summary[1] + "<br/>" + summary[2]
  reports.generate("/tmp/cars.pdf", "Sales summary for last month", string_print, table_items)
  # TODO: send the PDF report as an email attachment
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body = "Hi,\nI'm sending an attachment with sales summary for last month."
  
  message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
  emails.send(message)

if __name__ == "__main__":
  main(sys.argv)